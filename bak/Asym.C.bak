// TASKS:
// print 4 panal TCanvas (4 panels for 4 spinbits); 
// make a pdf with one run per page; one pdf file per kinematic/geometric bin

void Asym()
{
  TFile * infile = new TFile("phiset/all.root","READ");

  // set ranges
  Int_t phi_bins0, eta_bins0, pt_bins0, en_bins0;
  if(gSystem->Getenv("PHI")==NULL){fprintf(stderr,"ERROR: source env vars\n"); return;};
  sscanf(gSystem->Getenv("PHI"),"%d",&phi_bins0);
  sscanf(gSystem->Getenv("ETA"),"%d",&eta_bins0);
  sscanf(gSystem->Getenv("PT"),"%d",&pt_bins0);
  sscanf(gSystem->Getenv("EN"),"%d",&en_bins0);
  const Double_t pi=3.1415;
  const Double_t phi_bins=phi_bins0; 
  const Double_t eta_bins=eta_bins0;
    const Double_t eta_low=2.6; const Double_t eta_high=4.2;
  const Double_t pt_bins=pt_bins0; 
    const Double_t pt_low=0; const Double_t pt_high=10;
  const Double_t en_bins=en_bins0; 
    const Double_t en_low=0; const Double_t en_high=100;

  // set binning
  // -- *_div = lower limit of each bin; last one is the upper limit
  // -- *_width = bin width
  Double_t eta_div[eta_bins+1];
  Double_t eta_width = (eta_high - eta_low)/eta_bins;
  for(Int_t i=0; i<eta_bins; i++) eta_div[i] = eta_low + i * eta_width;
  Double_t pt_div[pt_bins+1];
  Double_t pt_width = (pt_high - pt_low)/pt_bins;
  for(Int_t i=0; i<pt_bins; i++) pt_div[i] = pt_low + i * pt_width;
  Double_t en_div[en_bins+1];
  Double_t en_width = (en_high - en_low)/en_bins;
  for(Int_t i=0; i<en_bins; i++) en_div[i] = en_low + i * en_width;

  eta_div[eta_bins] = eta_high;
  pt_div[pt_bins] = pt_high;
  en_div[en_bins] = en_high;


  // read TObjArrays
  TObjArray * phi_dist_arr[4][eta_bins][pt_bins][en_bins];
  TObjArray * phi_dist_arr_P[4][eta_bins][pt_bins][en_bins];
  char phi_dist_arr_n[4][eta_bins][pt_bins][en_bins][64];
  char phi_dist_arr_P_n[4][eta_bins][pt_bins][en_bins][64];
  Int_t NRUNS_tmp;
  for(Int_t s=0; s<4; s++)
  {
    for(Int_t g=0; g<eta_bins; g++)
    {
      for(Int_t p=0; p<pt_bins; p++)
      {
        for(Int_t e=0; e<en_bins; e++)
        {
          sprintf(phi_dist_arr_n[s][g][p][e],"phi_dist_s%d_g%d_p%d_e%d",s,g,p,e);
          sprintf(phi_dist_arr_P_n[s][g][p][e],"phi_dist_P_s%d_g%d_p%d_e%d",s,g,p,e);
          phi_dist_arr[s][g][p][e] = (TObjArray*) infile->Get(phi_dist_arr_n[s][g][p][e]);
          phi_dist_arr_P[s][g][p][e] = (TObjArray*) infile->Get(phi_dist_arr_P_n[s][g][p][e]);
          printf("phi_dist_arr[%d][%d][%d][%d] @ %p\n",s,g,p,e,(void*)phi_dist_arr[s][g][p][e]);
          if(s==0 && g==0 && p==0 && e==0)
          {
            NRUNS_tmp=phi_dist_arr[s][g][p][e]->GetEntries();
          }
          else
          {
            if(phi_dist_arr[s][g][p][e]->GetEntries() != NRUNS_tmp ||
               phi_dist_arr_P[s][g][p][e]->GetEntries() != NRUNS_tmp)
            {
              fprintf(stderr,"ERROR: TObjArrays have different sizes\n");
              return;
            };
          };
        };
      };
    };
  };
  const Int_t NRUNS = NRUNS_tmp;
  printf("NRUNS=%d\n",NRUNS);


  // get phi_low and phi_high (i.e. determine if distribution is
  // over phi or sin(phi) )
  //phi_dist_arr[0][0][0][0]->Print();
  Double_t low_edge = ((TH1D*)phi_dist_arr[0][0][0][0]->At(0))->GetBinLowEdge(1);
  Double_t phi_low0,phi_high0;
  char var_str[16];
  if(fabs(low_edge+1)<0.2)
  {
    phi_low0=-1;
    phi_high0=1;
    strcpy(var_str,"sin(#phi)");
  }
  else if(fabs(low_edge+pi)<0.2)
  {
    phi_low0=-1*pi;
    phi_high0=pi;
    strcpy(var_str,"#phi");
  }
  else
  {
    fprintf(stderr,"ERROR: unfamiliar binning of distribution (binning recently changed?)\n");
    return;
  };
  const Double_t phi_low = phi_low0;
  const Double_t phi_high = phi_high0;
              


  // compute asymmetry
  TH1D * dist_same[eta_bins][pt_bins][en_bins][NRUNS]; // S = N++ + N--
  TH1D * dist_diff[eta_bins][pt_bins][en_bins][NRUNS]; // D = R*(N+- + N-+)
  TH1D * dist_same_P[eta_bins][pt_bins][en_bins][NRUNS]; // S_P = 1/P * (N++ + N--)
  TH1D * dist_diff_P[eta_bins][pt_bins][en_bins][NRUNS]; // D_P = 1/P * ( R*(N+- + N-+) )
  TH1D * numer[eta_bins][pt_bins][en_bins][NRUNS]; // S_P - D_P
  TH1D * denom[eta_bins][pt_bins][en_bins][NRUNS]; // S + D
  TH1D * asym[eta_bins][pt_bins][en_bins][NRUNS]; // numer / denom
  char dist_same_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char dist_diff_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char dist_same_P_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char dist_diff_P_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char numer_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char denom_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char asym_n[eta_bins][pt_bins][en_bins][NRUNS][128];
  char asym_t[eta_bins][pt_bins][en_bins][NRUNS][256];
  Float_t p0,p0e,chi2,ndf;
  Float_t bc[4];
  Float_t bc_P[4];
  Int_t runnum;
  Int_t runnum_0;
  Float_t A_LL[eta_bins][pt_bins][en_bins];
  Int_t A_LL_cnt[eta_bins][pt_bins][en_bins];
  TF1 * asym_fit[eta_bins][pt_bins][en_bins];
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        A_LL[g][p][e]=0.0;
        A_LL_cnt[g][p][e]=0;
      };
    };
  };
  for(Int_t r=0; r<NRUNS; r++)
  {
    for(Int_t g=0; g<eta_bins; g++)
    {
      for(Int_t p=0; p<pt_bins; p++)
      {
        for(Int_t e=0; e<en_bins; e++)
        {
          sscanf(phi_dist_arr[0][g][p][e]->At(r)->GetName(),
            "phi_s%*d_g%*d_p%*d_e%*d_r%d",&runnum);
          if(e==0 && g==0 && p==0) 
          {
            printf("%d %p %p r%d\n",r,(void*)phi_dist_arr[0][g][p][e],
                (void*)phi_dist_arr[0][g][p][e]->At(0),runnum);
            runnum_0 = runnum;
          }
          else
          {
            if(runnum != runnum_0)
            {
              fprintf(stderr,"Error: TObjArrays not synced\n");
              return;
            };
          };

          sprintf(dist_same_n[g][p][e][r],"dist_same_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(dist_diff_n[g][p][e][r],"dist_diff_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(dist_same_P_n[g][p][e][r],"dist_same_P_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(dist_diff_P_n[g][p][e][r],"dist_diff_P_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(numer_n[g][p][e][r],"numer_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(denom_n[g][p][e][r],"denom_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(asym_n[g][p][e][r],"asym_g%d_p%d_e%d_r%d",g,p,e,runnum);
          sprintf(asym_t[g][p][e][r],
            "A_{LL} vs. %s :: #eta#in[%.2f,%.2f), p_{T}#in[%.2f,%.2f), E#in[%.2f,%.2f), run=%d",
            var_str,eta_div[g],eta_div[g+1],pt_div[p],pt_div[p+1],en_div[e],en_div[e+1],runnum);

          dist_same[g][p][e][r] = new TH1D(dist_same_n[g][p][e][r],
              dist_same_n[g][p][e][r],phi_bins,phi_low,phi_high);
          dist_diff[g][p][e][r] = new TH1D(dist_diff_n[g][p][e][r],
              dist_diff_n[g][p][e][r],phi_bins,phi_low,phi_high);
          dist_same_P[g][p][e][r] = new TH1D(dist_same_P_n[g][p][e][r],
              dist_same_P_n[g][p][e][r],phi_bins,phi_low,phi_high);
          dist_diff_P[g][p][e][r] = new TH1D(dist_diff_P_n[g][p][e][r],
              dist_diff_P_n[g][p][e][r],phi_bins,phi_low,phi_high);
          numer[g][p][e][r] = new TH1D(numer_n[g][p][e][r],
              numer_n[g][p][e][r],phi_bins,phi_low,phi_high);
          denom[g][p][e][r] = new TH1D(denom_n[g][p][e][r],
              denom_n[g][p][e][r],phi_bins,phi_low,phi_high);
          asym[g][p][e][r] = new TH1D(asym_n[g][p][e][r],
              asym_t[g][p][e][r],phi_bins,phi_low,phi_high);

          for(Int_t b=0; b<phi_bins; b++)
          {
            for(Int_t s=0; s<4; s++)
            {
              bc[s] = ((TH1D*)(phi_dist_arr[s][g][p][e]->At(r)))->GetBinContent(b);
              bc_P[s] = ((TH1D*)(phi_dist_arr_P[s][g][p][e]->At(r)))->GetBinContent(b);
            };

            if(bc[0]*bc[1]*bc[2]*bc[3]>0)
            {
              asym[g][p][e][r]->SetBinContent(b,
                ( (bc_P[0]+bc_P[3]) - (bc_P[1] + bc_P[2]) ) / ( bc[0] + bc[1] + bc[2] + bc[3] ) );
            };
          };


          /*
          dist_same[g][p][e][r]->Add((TH1D*)phi_dist_arr[0][g][p][e]->At(r),
                                     (TH1D*)phi_dist_arr[3][g][p][e]->At(r), 1.0, 1.0);
          dist_diff[g][p][e][r]->Add((TH1D*)phi_dist_arr[1][g][p][e]->At(r),
                                     (TH1D*)phi_dist_arr[2][g][p][e]->At(r), 1.0, 1.0);
          dist_same_P[g][p][e][r]->Add((TH1D*)phi_dist_arr_P[0][g][p][e]->At(r),
                                       (TH1D*)phi_dist_arr_P[3][g][p][e]->At(r), 1.0, 1.0);
          dist_diff_P[g][p][e][r]->Add((TH1D*)phi_dist_arr_P[1][g][p][e]->At(r),
                                       (TH1D*)phi_dist_arr_P[2][g][p][e]->At(r), 1.0, 1.0);

          numer[g][p][e][r]->Add(dist_same_P[g][p][e][r],
                                 dist_diff_P[g][p][e][r], 1.0, -1.0);
          denom[g][p][e][r]->Add(dist_same[g][p][e][r],
                                 dist_diff[g][p][e][r], 1.0, 1.0);

          asym[g][p][e][r]->Divide(numer[g][p][e][r],
                                   denom[g][p][e][r], 1.0, 1.0);
          */
          //printf("\n%s\n",asym[g][p][e][r]->GetTitle());
          
          asym[g][p][e][r]->Fit("pol0","Q","",phi_low,phi_high);
          asym_fit[g][p][e] = asym[g][p][e][r]->GetFunction("pol0");
          if(asym_fit[g][p][e]!=NULL)
          {
            A_LL[g][p][e]+=asym_fit[g][p][e]->GetParameter(0);
            A_LL_cnt[g][p][e]++;
          };
        };
      };
    };
  };

  // average A_LL for each bin
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        A_LL[g][p][e] /= ((Float_t)A_LL_cnt[g][p][e]);
        printf("g%d p%d e%d <A_LL>=%f\n",g,p,e,A_LL[g][p][e]);
      };
    };
  };

  // write arrays
  printf("writing spin.root...\n");
  TFile * outfile = new TFile("spin.root","RECREATE");
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        for(Int_t s=0; s<4; s++)
        {
          phi_dist_arr[s][g][p][e]->Write(phi_dist_arr_n[s][g][p][e],
              TObject::kSingleKey);
          phi_dist_arr_P[s][g][p][e]->Write(phi_dist_arr_P_n[s][g][p][e],
              TObject::kSingleKey);
        };
      };
    };
  };
  TObjArray * asym_arr[eta_bins][pt_bins][en_bins];
  char asym_arr_n[eta_bins][pt_bins][en_bins][64];
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        asym_arr[g][p][e] = new TObjArray();
        for(Int_t r=0; r<NRUNS; r++) 
        {
          asym_arr[g][p][e]->AddLast(asym[g][p][e][r]);
        };
        sprintf(asym_arr_n[g][p][e],"asym_g%d_p%d_e%d",g,p,e);
        asym_arr[g][p][e]->Write(asym_arr_n[g][p][e],TObject::kSingleKey);
      };
    };
  };
  printf("written\n");

  return;


  // print pdfs
  char pdfname[eta_bins][pt_bins][en_bins][256];
  char pdfname_L[eta_bins][pt_bins][en_bins][256];
  char pdfname_R[eta_bins][pt_bins][en_bins][256];
  TCanvas * canv = new TCanvas("canv","canv",2000,1500);
  gStyle->SetOptFit(1);
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        sprintf(pdfname[g][p][e],"pdfset/asym_g%d_p%d_e%d.pdf",g,p,e);
        sprintf(pdfname_L[g][p][e],"pdfset/asym_g%d_p%d_e%d.pdf(",g,p,e);
        sprintf(pdfname_R[g][p][e],"pdfset/asym_g%d_p%d_e%d.pdf)",g,p,e);
        for(Int_t r=0; r<NRUNS; r++)
        {
          canv->Clear();
          canv->Divide(3,2);
          canv->cd(1); phi_dist_arr[0][g][p][e]->At(r)->Draw();
          canv->cd(2); phi_dist_arr[3][g][p][e]->At(r)->Draw();
          canv->cd(4); phi_dist_arr[1][g][p][e]->At(r)->Draw();
          canv->cd(5); phi_dist_arr[2][g][p][e]->At(r)->Draw();
          canv->cd(6); asym[g][p][e][r]->Draw();
          if(r==0) canv->Print(pdfname_L[g][p][e],"pdf");
          else if(r+1==NRUNS) canv->Print(pdfname_R[g][p][e],"pdf");
          else canv->Print(pdfname[g][p][e],"pdf");
        };
      };
    };
  };
};
