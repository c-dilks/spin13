// computes asymmetry between fully summed (i.e. over all runs) phi distributions
// -- A_L (blue)


void Asym_sb_sum()
{
  TFile * infile = new TFile("phiset/all.root","READ");
  gSystem->Load("src/RunData.so");
  RunData * RD = new RunData();

  // set ranges
  Int_t phi_bins0, eta_bins0, pt_bins0, en_bins0;
  if(gSystem->Getenv("PHI")==NULL){fprintf(stderr,"ERROR: source env vars\n"); return;};
  sscanf(gSystem->Getenv("PHI"),"%d",&phi_bins0);
  sscanf(gSystem->Getenv("ETA"),"%d",&eta_bins0);
  sscanf(gSystem->Getenv("PT"),"%d",&pt_bins0);
  sscanf(gSystem->Getenv("EN"),"%d",&en_bins0);
  const Double_t pi=3.1415;
  const Double_t phi_bins=phi_bins0; 
  const Double_t eta_bins=eta_bins0;
    const Double_t eta_low=2.6; const Double_t eta_high=4.2;
  const Double_t pt_bins=pt_bins0; 
    const Double_t pt_low=0; const Double_t pt_high=10;
  const Double_t en_bins=en_bins0; 
    const Double_t en_low=0; const Double_t en_high=100;

  // set binning
  // -- *_div = lower limit of each bin; last one is the upper limit
  // -- *_width = bin width
  Double_t eta_div[eta_bins+1];
  Double_t eta_width = (eta_high - eta_low)/eta_bins;
  for(Int_t i=0; i<eta_bins; i++) eta_div[i] = eta_low + i * eta_width;
  Double_t pt_div[pt_bins+1];
  Double_t pt_width = (pt_high - pt_low)/pt_bins;
  for(Int_t i=0; i<pt_bins; i++) pt_div[i] = pt_low + i * pt_width;
  Double_t en_div[en_bins+1];
  Double_t en_width = (en_high - en_low)/en_bins;
  for(Int_t i=0; i<en_bins; i++) en_div[i] = en_low + i * en_width;

  eta_div[eta_bins] = eta_high;
  pt_div[pt_bins] = pt_high;
  en_div[en_bins] = en_high;


  // read TObjArrays
  TObjArray * phi_dist_arr[4][eta_bins][pt_bins][en_bins];
  TObjArray * phi_dist_arr_dP[4][eta_bins][pt_bins][en_bins];
  char phi_dist_arr_n[4][eta_bins][pt_bins][en_bins][64];
  char phi_dist_arr_dP_n[4][eta_bins][pt_bins][en_bins][64];
  Int_t NRUNS_tmp;
  for(Int_t s=0; s<4; s++)
  {
    for(Int_t g=0; g<eta_bins; g++)
    {
      for(Int_t p=0; p<pt_bins; p++)
      {
        for(Int_t e=0; e<en_bins; e++)
        {
          sprintf(phi_dist_arr_n[s][g][p][e],"phi_dist_s%d_g%d_p%d_e%d",s,g,p,e);
          sprintf(phi_dist_arr_dP_n[s][g][p][e],"phi_dist_dP_s%d_g%d_p%d_e%d",s,g,p,e);
          phi_dist_arr[s][g][p][e] = (TObjArray*) infile->Get(phi_dist_arr_n[s][g][p][e]);
          phi_dist_arr_dP[s][g][p][e] = (TObjArray*) infile->Get(phi_dist_arr_dP_n[s][g][p][e]);
          printf("phi_dist_arr[%d][%d][%d][%d] @ %p\n",s,g,p,e,(void*)phi_dist_arr[s][g][p][e]);
          if(s==0 && g==0 && p==0 && e==0)
          {
            NRUNS_tmp=phi_dist_arr[s][g][p][e]->GetEntries();
          }
          else
          {
            if(phi_dist_arr[s][g][p][e]->GetEntries() != NRUNS_tmp ||
               phi_dist_arr_dP[s][g][p][e]->GetEntries() != NRUNS_tmp)
            {
              fprintf(stderr,"ERROR: TObjArrays have different sizes\n");
              return;
            };
          };
        };
      };
    };
  };
  const Int_t NRUNS = NRUNS_tmp;
  printf("NRUNS=%d\n",NRUNS);


  // get phi_low and phi_high (i.e. determine if distribution is
  // over phi or sin(phi) )
  //phi_dist_arr[0][0][0][0]->Print();
  Double_t low_edge = ((TH1D*)phi_dist_arr[0][0][0][0]->At(0))->GetBinLowEdge(1);
  Double_t phi_low0,phi_high0;
  char var_str[16];
  if(fabs(low_edge+1)<0.2)
  {
    phi_low0=-1;
    phi_high0=1;
    strcpy(var_str,"sin(#phi)");
  }
  else if(fabs(low_edge+pi)<0.2)
  {
    phi_low0=-1*pi;
    phi_high0=pi;
    strcpy(var_str,"#phi");
  }
  else
  {
    fprintf(stderr,"ERROR: unfamiliar binning of distribution (binning recently changed?)\n");
    return;
  };
  //const Double_t phi_low = phi_low0;
  //const Double_t phi_high = phi_high0;
  const Double_t phi_low = -1*pi;
  const Double_t phi_high = pi;

  


  // build summed histograms and weight spinbits 1 & 0 with rellum
  TH1D * phi_dist[4][eta_bins][pt_bins][en_bins];
  TH1D * phi_dist_dP[4][eta_bins][pt_bins][en_bins];
  char phi_dist_n[4][eta_bins][pt_bins][en_bins][128];
  char phi_dist_dP_n[4][eta_bins][pt_bins][en_bins][128];
  Int_t runnum;
  Float_t rellum,weight;
  for(Int_t s=0; s<4; s++)
  {
    for(Int_t g=0; g<eta_bins; g++)
    {
      for(Int_t p=0; p<pt_bins; p++)
      {
        for(Int_t e=0; e<en_bins; e++)
        {
          sprintf(phi_dist_n[s][g][p][e],"phi_s%d_g%d_p%d_e%d",s,g,p,e);
          sprintf(phi_dist_dP_n[s][g][p][e],"phi_dP_s%d_g%d_p%d_e%d",s,g,p,e);
          phi_dist[s][g][p][e] = new TH1D(phi_dist_n[s][g][p][e],phi_dist_n[s][g][p][e],phi_bins,-1*pi,pi);
          phi_dist_dP[s][g][p][e] = new TH1D(phi_dist_dP_n[s][g][p][e],phi_dist_dP_n[s][g][p][e],phi_bins,-1*pi,pi);

          for(Int_t r=0; r<NRUNS; r++)
          {
            sscanf(phi_dist_arr[0][g][p][e]->At(r)->GetName(),
              "phi_s%*d_g%*d_p%*d_e%*d_r%d",&runnum);
            rellum = RD->Rellum(runnum,2,"zdc");
            if(s==0 || s==1) weight = rellum;
            else weight = 1.0;
            phi_dist[s][g][p][e]->Add((TH1D*)(phi_dist_arr[s][g][p][e]->At(r)),weight);
            phi_dist_dP[s][g][p][e]->Add((TH1D*)(phi_dist_arr_dP[s][g][p][e]->At(r)),weight);
          };
        };
      };
    };
  };
        

  // compute asymmetry
  TH1D * dist_hpos[eta_bins][pt_bins][en_bins]; // S = N++ + N--
  TH1D * dist_hneg[eta_bins][pt_bins][en_bins]; // D = R*(N+- + N-+)
  TH1D * dist_hpos_dP[eta_bins][pt_bins][en_bins]; // S_dP = 1/P * (N++ + N--)
  TH1D * dist_hneg_dP[eta_bins][pt_bins][en_bins]; // D_dP = 1/P * ( R*(N+- + N-+) )
  TH1D * numer[eta_bins][pt_bins][en_bins]; // S_dP - D_dP
  TH1D * denom[eta_bins][pt_bins][en_bins]; // S + D
  TH1D * asym[eta_bins][pt_bins][en_bins]; // numer / denom
  Int_t asym_pts[eta_bins][pt_bins][en_bins]; // number of points in asym
  char dist_hpos_n[eta_bins][pt_bins][en_bins][128];
  char dist_hneg_n[eta_bins][pt_bins][en_bins][128];
  char dist_hpos_dP_n[eta_bins][pt_bins][en_bins][128];
  char dist_hneg_dP_n[eta_bins][pt_bins][en_bins][128];
  char numer_n[eta_bins][pt_bins][en_bins][128];
  char denom_n[eta_bins][pt_bins][en_bins][128];
  char asym_n[eta_bins][pt_bins][en_bins][128];
  char asym_t[eta_bins][pt_bins][en_bins][256];
  Float_t p0,p0e,chi2,ndf;
  Float_t bc[4];
  Float_t bc_dP[4];
  Float_t bcent;
  Int_t runnum_0;
  Float_t A_LL[eta_bins][pt_bins][en_bins];
  Int_t A_LL_cnt[eta_bins][pt_bins][en_bins];
  TF1 * asym_fit[eta_bins][pt_bins][en_bins];
  Float_t asym_tmp;
  Float_t asym_max[eta_bins][pt_bins][en_bins];
  Float_t asym_min[eta_bins][pt_bins][en_bins];
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        A_LL[g][p][e]=0.0;
        A_LL_cnt[g][p][e]=0;
        asym_max[g][p][e]=0;
        asym_min[g][p][e]=0;
      };
    };
  };
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        /*
        sscanf(phi_dist_arr[0][g][p][e]->At(r)->GetName(),
          "phi_s%*d_g%*d_p%*d_e%*d_r%d",&runnum);
        if(e==0 && g==0 && p==0) 
        {
          printf("%d %p %p r%d\n",r,(void*)phi_dist_arr[0][g][p][e],
              (void*)phi_dist_arr[0][g][p][e]->At(0),runnum);
          runnum_0 = runnum;
        }
        else
        {
          if(runnum != runnum_0)
          {
            fprintf(stderr,"Error: TObjArrays not synced\n");
            return;
          };
        };
        */

        sprintf(dist_hpos_n[g][p][e],"dist_hpos_g%d_p%d_e%d",g,p,e);
        sprintf(dist_hneg_n[g][p][e],"dist_hneg_g%d_p%d_e%d",g,p,e);
        sprintf(dist_hpos_dP_n[g][p][e],"dist_hpos_dP_g%d_p%d_e%d",g,p,e);
        sprintf(dist_hneg_dP_n[g][p][e],"dist_hneg_dP_g%d_p%d_e%d",g,p,e);
        sprintf(numer_n[g][p][e],"numer_g%d_p%d_e%d",g,p,e);
        sprintf(denom_n[g][p][e],"denom_g%d_p%d_e%d",g,p,e);
        sprintf(asym_n[g][p][e],"asym_g%d_p%d_e%d",g,p,e);
        sprintf(asym_t[g][p][e],
          "A_{L}^{blue} vs. %s :: #eta#in[%.2f,%.2f), p_{T}#in[%.2f,%.2f), E#in[%.2f,%.2f) (runsum)",
          var_str,eta_div[g],eta_div[g+1],pt_div[p],pt_div[p+1],en_div[e],en_div[e+1]);

        dist_hpos[g][p][e] = new TH1D(dist_hpos_n[g][p][e],
            dist_hpos_n[g][p][e],phi_bins,phi_low,phi_high);
        dist_hneg[g][p][e] = new TH1D(dist_hneg_n[g][p][e],
            dist_hneg_n[g][p][e],phi_bins,phi_low,phi_high);
        dist_hpos_dP[g][p][e] = new TH1D(dist_hpos_dP_n[g][p][e],
            dist_hpos_dP_n[g][p][e],phi_bins,phi_low,phi_high);
        dist_hneg_dP[g][p][e] = new TH1D(dist_hneg_dP_n[g][p][e],
            dist_hneg_dP_n[g][p][e],phi_bins,phi_low,phi_high);
        numer[g][p][e] = new TH1D(numer_n[g][p][e],
            numer_n[g][p][e],phi_bins,phi_low,phi_high);
        denom[g][p][e] = new TH1D(denom_n[g][p][e],
            denom_n[g][p][e],phi_bins,phi_low,phi_high);
        asym[g][p][e] = new TH1D(asym_n[g][p][e],
            asym_t[g][p][e],phi_bins,phi_low,phi_high);

        dist_hpos[g][p][e]->Add(phi_dist[3][g][p][e],phi_dist[2][g][p][e],1.0,1.0);
        dist_hneg[g][p][e]->Add(phi_dist[1][g][p][e],phi_dist[0][g][p][e],1.0,1.0);

        dist_hpos_dP[g][p][e]->Add(phi_dist_dP[3][g][p][e],phi_dist_dP[2][g][p][e],1.0,1.0);
        dist_hneg_dP[g][p][e]->Add(phi_dist_dP[1][g][p][e],phi_dist_dP[0][g][p][e],1.0,1.0);
        
        numer[g][p][e]->Add(dist_hpos_dP[g][p][e],dist_hneg_dP[g][p][e],1.0,-1.0);
        denom[g][p][e]->Add(dist_hpos[g][p][e],dist_hneg[g][p][e],1.0,1.0);

        asym[g][p][e]->Divide(numer[g][p][e],denom[g][p][e],1.0,1.0);

        printf(asym[g][p][e]->GetTitle());
        printf("\n");

        /*
        asym[g][p][e] = new TGraphErrors();
        asym[g][p][e]->SetName(asym_n[g][p][e]);
        asym[g][p][e]->SetTitle(asym_t[g][p][e]);
        asym[g][p][e]->SetMarkerStyle(kFullCircle);
        asym[g][p][e]->SetMarkerColor(kRed);
        asym[g][p][e]->SetMarkerSize(1.5);
        asym_pts[g][p][e] = 0;

        for(Int_t b=0; b<=phi_bins; b++)
        {
          for(Int_t s=0; s<4; s++)
          {
            bc[s] = phi_dist[s][g][p][e]->GetBinContent(b);
            bc_dP[s] = phi_dist_dP[s][g][p][e]->GetBinContent(b);
          };
          bcent = phi_dist[0][g][p][e]->GetBinCenter(b);

          if(bc[0]*bc[1]*bc[2]*bc[3]>0)
          {
            asym_tmp = ( (bc_dP[0]+bc_dP[3]) - (bc_dP[1] + bc_dP[2]) ) / ( bc[0] + bc[1] + bc[2] + bc[3] );
            asym_max[g][p][e] = (asym_tmp > asym_max[g][p][e]) ? asym_tmp:asym_max[g][p][e];
            asym_min[g][p][e] = (asym_tmp < asym_min[g][p][e]) ? asym_tmp:asym_min[g][p][e];
            asym[g][p][e]->SetPoint(asym_pts[g][p][e],bcent,asym_tmp);
            asym_pts[g][p][e]++;
          };
        };
        */

        
        // n.b. for one phi bin, constant fit & error matches the bin & its error
        asym[g][p][e]->Fit("pol0","Q","",phi_low,phi_high);
        asym_fit[g][p][e] = asym[g][p][e]->GetFunction("pol0");
        if(asym_fit[g][p][e]!=NULL)
        {
          A_LL[g][p][e]+=asym_fit[g][p][e]->GetParameter(0);
          A_LL_cnt[g][p][e]++;
        };
      };
    };
  };

  // set plot ranges
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        //asym[g][p][e]->GetYaxis()->SetRangeUser(2*asym_min[g][p][e],2*asym_max[g][p][e]);
        asym[g][p][e]->GetXaxis()->SetRangeUser(phi_low,phi_high);
      };
    };
  };


  // average A_LL for each bin
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        A_LL[g][p][e] /= ((Float_t)A_LL_cnt[g][p][e]);
        printf("g%d p%d e%d <A_LL>=%f\n",g,p,e,A_LL[g][p][e]);
      };
    };
  };

  // plot pt or en dependence
  Double_t aLL_pt[pt_bins];
  Double_t aLL_en[en_bins];
  Double_t err_pt[pt_bins];
  Double_t err_en[en_bins];
  Double_t pt_cent[pt_bins];
  Double_t en_cent[en_bins];
  Double_t pt_binerr[pt_bins];
  Double_t en_binerr[en_bins];
  TGraphErrors * kin_dep;
  if(eta_bins==1)
  {
    if(en_bins==1 && pt_bins>1)
    {
      for(Int_t p=0; p<pt_bins; p++)
      {
        if(asym[0][p][0]->GetFunction("pol0"))
        {
          aLL_pt[p] = asym[0][p][0]->GetFunction("pol0")->GetParameter(0);
          err_pt[p] = asym[0][p][0]->GetFunction("pol0")->GetParError(0);
          pt_cent[p] = pt_div[p] + (pt_width/2.0);
          pt_binerr[p] = pt_width/2.0;
        };
      };
      kin_dep = new TGraphErrors(pt_bins,pt_cent,aLL_pt,pt_binerr,err_pt);
      kin_dep->SetTitle("A_{L}^{blue} vs. P_{T}");
      kin_dep->GetXaxis()->SetTitle("P_{T} (GeV)");
    }
    else if(pt_bins==1 && en_bins>1)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        if(asym[0][0][e]->GetFunction("pol0"))
        {
          aLL_en[e] = asym[0][0][e]->GetFunction("pol0")->GetParameter(0);
          err_en[e] = asym[0][0][e]->GetFunction("pol0")->GetParError(0);
          en_cent[e] = en_div[e] + (en_width/2.0);
          en_binerr[e] = en_width/2.0;
        };
      };
      kin_dep = new TGraphErrors(en_bins,en_cent,aLL_en,en_binerr,err_en);
      kin_dep->SetTitle("A_{L}^{blue} vs. E_{#gamma#gamma}");
      kin_dep->GetXaxis()->SetTitle("E_{#gamma#gamma} (GeV)");
    };
  };
  kin_dep->GetYaxis()->SetTitle("A_{L}^{blue}");
  kin_dep->SetMarkerStyle(kFullCircle);
  kin_dep->SetMarkerColor(kRed);
  kin_dep->GetYaxis()->SetTitleOffset(1.5);


  // write phi dists
  printf("writing spin_sb_sum.root...\n");
  TFile * outfile = new TFile("spin_sb_sum.root","RECREATE");
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        for(Int_t s=0; s<4; s++)
        {
          phi_dist[s][g][p][e]->Write(phi_dist_n[s][g][p][e]);
          phi_dist_dP[s][g][p][e]->Write(phi_dist_dP_n[s][g][p][e]);
        };
      };
    };
  };
  for(Int_t g=0; g<eta_bins; g++)
  {
    for(Int_t p=0; p<pt_bins; p++)
    {
      for(Int_t e=0; e<en_bins; e++)
      {
        asym[g][p][e]->Write(asym_n[g][p][e]);
      };
    };
  };
  if(en_bins==1 || pt_bins==1) kin_dep->Write("kin_dep");
  printf("written\n");
};
